import asyncio
import logging
import os
from aiogram.types import FSInputFile
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from g4f.client import Client

# –¢–æ–∫–µ–Ω —Ç–≤–æ–µ–≥–æ –±–æ—Ç–∞
TOKEN = ''

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º –±–æ—Ç–∞ –∏ –∫–ª–∏–µ–Ω—Ç G4F
bot = Bot(token=TOKEN)
dp = Dispatcher()
g4f_client = Client()

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ–º –∏ –∫–∞—Ä—Ç–∏–Ω–∫–æ–π
@dp.message(Command("start"))
async def start(message: types.Message):
    logger.info(f"Received start command from user {message.from_user.id}")
    try:
        base_dir = os.path.dirname(__file__)
        photo_path = os.path.join(base_dir, "welcome.jpg")
        photo = FSInputFile(photo_path)
        await message.answer_photo(photo, caption=f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –ü–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å!")
    except Exception as e:
        logger.error(f"Error sending welcome message: {str(e)}")
        await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}! –ü–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å!")

# –û—Ç–≤–µ—Ç –Ω–∞ –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
@dp.message()
async def handle_text(message: types.Message):
    try:
        logger.info(f"Received message from user {message.from_user.id}: {message.text}")
        
        response = g4f_client.chat.completions.create(
            model="gpt-4",
            messages=[{"role": "user", "content": message.text}]
        )
        
        logger.info(f"G4F response received: {response}")
        
        if response and response.choices and len(response.choices) > 0:
            answer_text = response.choices[0].message.content
            logger.info(f"Sending response to user: {answer_text[:100]}...")
            await message.answer(answer_text)
        else:
            logger.error("Empty response from G4F")
            await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            
    except Exception as e:
        logger.error(f"Error processing message: {str(e)}", exc_info=True)
        await message.answer("‚ùóÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ó–∞–ø—É—Å–∫
async def main():
    logger.info("Starting bot...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())